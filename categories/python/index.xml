<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Zhou Zaida</title>
    <link>https://JustTryItNow.github.io/categories/python/</link>
    <description>Recent content in Python on Zhou Zaida</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Dec 2019 00:08:27 +0800</lastBuildDate>
    
	<atom:link href="https://JustTryItNow.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>magicmethods</title>
      <link>https://JustTryItNow.github.io/post/magicmethods/</link>
      <pubDate>Sun, 01 Dec 2019 00:08:27 +0800</pubDate>
      
      <guid>https://JustTryItNow.github.io/post/magicmethods/</guid>
      <description>转载自https://rszalski.github.io/magicmethods/ Introduction This guide is the culmination of a few months&amp;rsquo; worth of blog posts. The subject is magic methods. What are magic methods? They&amp;rsquo;re everything in object-oriented</description>
    </item>
    
    <item>
      <title>Iterables vs Iterator vs Generators</title>
      <link>https://JustTryItNow.github.io/post/iterables-vs-iterator-vs-generators/</link>
      <pubDate>Sat, 30 Nov 2019 23:56:25 +0800</pubDate>
      
      <guid>https://JustTryItNow.github.io/post/iterables-vs-iterator-vs-generators/</guid>
      <description>转载自https://nvie.com/posts/iterators-vs-generators/ Occasionally I&amp;rsquo;ve run into situations of confusion on the exact differences between the following related concepts in Python: a container</description>
    </item>
    
    <item>
      <title>Python copy() VS deepcopy()</title>
      <link>https://JustTryItNow.github.io/post/python-copy/</link>
      <pubDate>Wed, 27 Nov 2019 20:24:30 +0800</pubDate>
      
      <guid>https://JustTryItNow.github.io/post/python-copy/</guid>
      <description>1 deepcopy()深拷贝 deepcopy()，会产生一个独立的对象，不互相影响 2 copy()浅拷贝 2.1 浅拷贝的值是不可变对象（整数、浮点数</description>
    </item>
    
    <item>
      <title>Python itertools--为高效循环而创建迭代器的函数</title>
      <link>https://JustTryItNow.github.io/post/python-itertools/</link>
      <pubDate>Tue, 26 Nov 2019 20:06:21 +0800</pubDate>
      
      <guid>https://JustTryItNow.github.io/post/python-itertools/</guid>
      <description>1 无穷迭代器 1.1 count() 均匀间隔产生值的迭代器 1 2 3 4 5 from itertools import count from itertools import islice result = count(start=1, step=2) print(list(islice(result, 0, 8, 1))) # [1, 3, 5, 7, 9, 11, 13, 15 1.2 cycle() 循环迭代可迭代对象 1 2 3 4 5 from itertools import cycle from</description>
    </item>
    
    <item>
      <title>Python collections--高性能容器数据类型</title>
      <link>https://JustTryItNow.github.io/post/python-collections/</link>
      <pubDate>Tue, 26 Nov 2019 20:01:18 +0800</pubDate>
      
      <guid>https://JustTryItNow.github.io/post/python-collections/</guid>
      <description>1 Counter Counter是dict的子类，用于计数可哈希对象。Counter()接受可迭代对象作为输入，例如列表、元组，并返回Counter类型的</description>
    </item>
    
    <item>
      <title>深入理解Python3元类</title>
      <link>https://JustTryItNow.github.io/post/metaclass/</link>
      <pubDate>Sun, 20 Oct 2019 22:28:08 +0800</pubDate>
      
      <guid>https://JustTryItNow.github.io/post/metaclass/</guid>
      <description>类 在介绍元类之前，我们先来聊一下类。在大多数语言中，类是用于生成对象的一段封装的代码，Python也是如此 1 2 3 4 class ObjectCreator(object): pass my_object = ObjectCreator() print(my_object) # &amp;lt;__main__.ObjectCreator at 0x7f4b78437550&amp;gt; Ob</description>
    </item>
    
  </channel>
</rss>